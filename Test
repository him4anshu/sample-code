
import javax.validation.Constraint;
import javax.validation.Payload;
import java.lang.annotation.Documented;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

@Documented
@Constraint(validatedBy = DateTimeValidator.class)
@Target({ElementType.FIELD, ElementType.PARAMETER})
@Retention(RetentionPolicy.RUNTIME)
public @interface ValidDateTime {
    String message() default "Invalid date format";
    String format() default "yyyy-MM-dd'T'HH:mm:ss"; // Default ISO format
    Class<?>[] groups() default {};
    Class<? extends Payload>[] payload() default {};
}

import javax.validation.ConstraintValidator;
import javax.validation.ConstraintValidatorContext;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

public class DateTimeValidator implements ConstraintValidator<ValidDateTime, String> {
    private String format;

    @Override
    public void initialize(ValidDateTime constraintAnnotation) {
        this.format = constraintAnnotation.format();
    }

    @Override
    public boolean isValid(String value, ConstraintValidatorContext context) {
        if (value == null || value.isEmpty()) {
            return true; // Consider null or empty as valid; handle with @NotNull if needed
        }
        SimpleDateFormat sdf = new SimpleDateFormat(format);
        sdf.setLenient(false); // Strict parsing
        try {
            Date date = sdf.parse(value);
            return value.equals(sdf.format(date)); // Check if formatted date matches input
        } catch (ParseException e) {
            return false; // Invalid date format
        }
    }
}

  @ValidDateTime(format = "yyyy-MM-dd'T'HH:mm:ss", message = "Invalid event date format. Expected format is yyyy-MM-dd'T'HH:mm:ss")
    private String eventDate;
